function getOffsets(e, t) {
    let s = .866 * e
      , r = e
      , a = []
      , hex_point_up = false;;
    board = (e => {
        switch (e) {
        case "normal":
            board.tiles_per_row = [3, 4, 5, 4, 3],
            board.row_step = .73 * r,
            board.center_row = Math.floor(board.tiles_per_row.length / 2),
            board.cell_step = .99 * s;
            break;
        case "expanded":
            board.tiles_per_row = [1, 2, 3, 4, 3, 4, 3, 4, 3, 2, 1],
            board.center_row = Math.floor(board.tiles_per_row.length / 2),
            board.cell_step = 1.51 * r * .99,
            board.row_step = s / 1.99;
            break;
        case "super_expanded":
            // Example: 13 rows for super expansion, adjust as needed
            board.tiles_per_row = [4, 5, 6, 7, 6, 5, 4];
            board.center_row = Math.floor(board.tiles_per_row.length / 2);
            board.cell_step = .99 * s; // adjust for spacing
            board.row_step = .73 * r; // adjust for spacing
            hex_point_up = true;
            break;
        }
        return board
    }
    )(t);
    for (let e = 0; e < board.tiles_per_row.length; e++) {
        var o = e
          , d = board;
        row_level = o - Number(d.center_row),
        y_coordinate = 50 + row_level * d.row_step,
        x_is_even_shift = o % 2 * d.cell_step / 2,
        x_is_even_shift = hex_point_up ? -x_is_even_shift : x_is_even_shift;
        x_first_cell_shift = Math.floor(d.tiles_per_row[o] / 2) * d.cell_step;
        for (let e = 0; e < d.tiles_per_row[o]; e++)
            x_coordinate = 50 - x_first_cell_shift + x_is_even_shift + e * d.cell_step,
            a.push(`left:${x_coordinate}%;top:${y_coordinate}%`)
    }
    return a
}
let getAdjList = e => {
    switch (e) {
        case "normal":
            adjacencyList = {
                0: [1, 3, 4],
                1: [0, 2, 4, 5],
                2: [1, 5, 6],
                3: [0, 4, 7, 8],
                4: [0, 1, 3, 5, 8, 9],
                5: [1, 2, 4, 6, 9, 10],
                6: [2, 5, 10, 11],
                7: [3, 8, 12],
                8: [3, 4, 7, 9, 12, 13],
                9: [4, 5, 8, 10, 13, 14],
                10: [5, 6, 9, 11, 14, 15],
                11: [6, 10, 15],
                12: [7, 8, 13, 16],
                13: [8, 9, 12, 14, 16, 17],
                14: [9, 10, 13, 15, 17, 18],
                15: [10, 11, 14, 18],
                16: [12, 13, 17],
                17: [13, 14, 16, 18],
                18: [14, 15, 17]
            };
            break;
        case "expanded":
            adjacencyList = {
                0: [1, 2, 4],
                1: [3, 4, 7],
                2: [4, 5, 8],
                3: [6, 7, 10],
                4: [7, 8, 11],
                5: [8, 9, 12],
                6: [3, 10, 13],
                7: [1, 3, 4, 10, 11, 14],
                8: [2, 4, 5, 11, 12, 15],
                9: [5, 12, 16],
                10: [3, 6, 7, 13, 14, 17],
                11: [4, 7, 8, 14, 15, 18],
                12: [5, 8, 9, 15, 16, 19],
                13: [6, 10, 17, 20],
                14: [7, 10, 11, 17, 18, 21],
                15: [8, 11, 12, 18, 19, 22],
                16: [9, 12, 19, 23],
                17: [10, 13, 14, 20, 21, 24],
                18: [11, 14, 15, 21, 22, 25],
                19: [12, 15, 16, 22, 23, 26],
                20: [13, 17, 24],
                21: [14, 17, 18, 24, 25, 27],
                22: [15, 18, 19, 25, 26, 28],
                23: [16, 19, 26],
                24: [17, 20, 21, 27],
                25: [18, 21, 22, 27, 28, 29],
                26: [19, 22, 23, 28],
                27: [21, 24, 25, 29],
                28: [22, 25, 26, 29],
                29: [25, 27, 28]
            };
            break;
        case "super_expanded":
            // TODO: Define the correct adjacency list for super_expanded
            adjacencyList = {
                0: [1, 2, 5],
                1: [0, 2, 5, 6],
                2: [1, 3, 6, 7],
                3: [2, 7, 8],
                4: [0, 5, 9, 10],
                5: [0, 1, 4, 6, 10, 11],
                6: [1, 2, 5, 7, 11, 12],
                7: [2, 3, 6, 8, 12, 13],
                8: [3, 7, 13, 14],
                9: [4, 5, 10, 16],
                10: [4, 5, 9, 11, 16, 17],
                11: [5, 6, 10, 12, 17, 18],
                12: [6, 7, 11, 13, 18, 19],
                13: [7, 8, 12, 14, 19, 20],
                14: [8, 13, 20, 21],
                15: [9, 16, 22],
                16: [9, 10, 15, 17, 22, 23],
                17: [10, 11, 16, 18, 23, 24],
                18: [11, 12, 17, 19, 24, 25],
                19: [12, 13, 18, 20, 25, 26],
                20: [13, 14, 19, 21, 26, 27],
                21: [14, 20, 27],
                22: [15, 16, 23, 28],
                23: [16, 17, 22, 24, 28, 29],
                24: [17, 18, 23, 25, 29, 30],
                25: [18, 19, 24, 26, 30, 31],
                26: [19, 20, 25, 27, 31, 32],
                27: [20, 21, 26, 32],
                28: [22, 23, 29, 33],
                29: [23, 24, 28, 30, 33, 34],
                30: [24, 25, 29, 31, 34, 35],
                31: [25, 26, 30, 32, 35, 36],
                32: [26, 27, 31, 36],
                33: [28, 29, 34],
                34: [29, 30, 33, 35],
                35: [30, 31, 34, 36],
                36: [31, 32, 35]
            };
            break;
    }
}
, normalSize = (
    state = {
    numArray: [2, 3, 3, 4, 4, 5, 5, 6, 6, 8, 8, 9, 9, 10, 10, 11, 11, 12],
    regNums: [, 3, 4, 5, 9, 10, 11],
    expandednumArray: [2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12],
    superexpandednumArray: [2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 12],
    expandedresourceArray: ["ore", "ore", "ore", "ore", "ore", "brick", "brick", "brick", "brick", "brick", "sheep", "sheep", "sheep", "sheep", "sheep", "sheep", "wood", "wood", "wood", "wood", "wood", "wood", "wheat", "wheat", "wheat", "wheat", "wheat", "wheat"],
    resourceArray: ["ore", "ore", "ore", "brick", "brick", "brick", "sheep", "sheep", "sheep", "sheep", "wood", "wood", "wood", "wood", "wheat", "wheat", "wheat", "wheat"],
    superexpandedresourceArray: ["wheat", "sheep", "wood", "brick", "ore", "brick", "ore", "ore", "ore", "ore", "ore", "ore", "brick", "brick", "brick", "brick", "brick", "sheep", "sheep", "sheep", "sheep", "sheep", "sheep", "wood", "wood", "wood", "wood", "wood", "wood", "wheat", "wheat", "wheat", "wheat", "wheat", "wheat"],
    prob: ["", "", ".", "..", "...", "....", ".....", "", ".....", "....", "...", "..", "."]}, 17.5), 
expandedSize = 16, 
superexpandedSize = expandedSize,
resourceTypes = ["ore", "sheep", "brick", "wood", "wheat", "desert"], 
adjacencyList, size, modeElement = document.getElementById("selected-map"), 
imageTypeElement = document.getElementById("image_option_input"), 
IMAGETHEMECHOSEN = "", mode, 
shuftype = (mode = null == modeElement ? "normal" : modeElement.value, size = "normal" == mode ? normalSize : expandedSize,
"random"), adjacent_6_8 = true, adjacent_2_12 = !0, adjacent_same_numbers = !0, adjacent_same_resource = !0, settingAdjusted = !1, setMenuValues = () => {
    document.getElementById("adjacent_6_8_input").checked = adjacent_6_8,
    document.getElementById("adjacent_2_12_input").checked = adjacent_2_12,
    document.getElementById("adjacent_same_numbers_input").checked = adjacent_same_numbers,
    document.getElementById("adjacent_same_resource_input").checked = adjacent_same_resource,
    "" == IMAGETHEMECHOSEN ? document.getElementById("image_option_input").value = "newAssets" : document.getElementById("image_option_input").value = IMAGETHEMECHOSEN
}
, tileOffsetCSS = getOffsets(size, mode), shuffle = t => {
    for (let e = t.length - 1; 0 < e; e--) {
        var s = Math.floor(Math.random() * (e + 1));
        [t[e],t[s]] = [t[s], t[e]]
    }
    return t
}
, selectShuffle = () => {
    shuftype = document.getElementById("pick-shuffle").value,
    console.log(shuftype),
    start()
}
, selectMode = () => {
    mode = document.getElementById("pick-mode").value;
    switch (mode) {
        case "normal":
            size = normalSize;
            break;
        case "expanded":
            size = expandedSize;
            break;
        case "super_expanded":
            size = superExpandedSize;
            break;
        default:
            size = normalSize;
    }
    flipSameResourceSetting();
    tileOffsetCSS = getOffsets(size, mode);
    start()
}
, toggleDisplaySetting = e => {
    var t = document.styleSheets[0].cssRules;
    if ("switchimages" === e) {
        selectedImageStyle = document.getElementById("image_option_input").value,
        IMAGETHEMECHOSEN = selectedImageStyle;
        for (var s of resourceTypes)
            for (var r = "." + s, a = 0; a < t.length; a++) {
                var o = t[a];
                o.selectorText === r && (o.style.backgroundImage = ` url(./${selectedImageStyle}/${s}.png)`)
            }
    }
}
, toggleSetting = e => {
    switch (settingAdjusted = !0,
    e) {
    case "6_8":
        adjacent_6_8 = document.getElementById("adjacent_6_8_input").checked;
        break;
    case "2_12":
        adjacent_2_12 = document.getElementById("adjacent_2_12_input").checked;
        break;
    case "same_number":
        adjacent_same_numbers = document.getElementById("adjacent_same_numbers_input").checked;
        break;
    case "same_resource":
        adjacent_same_resource = document.getElementById("adjacent_same_resource_input").checked
    }
}
, passedAdjacencyTest = (e, t, s) => {
    for (var [r,a] of e.entries())
        if (a.chit == t || a.chit == s)
            for (adj of adjacencyList[r])
                if (e[adj].chit == t || e[adj].chit == s)
                    return !1;
    return !0
}
, passedBalancedCheck = e => !0, passedResourceCheck = (t, s) => {
    for (var [r,a] of t.entries()) {
        var o = a.resource;
        let e = 1;
        for (adj of adjacencyList[r])
            o == t[adj].resource && e++;
        if (e > s)
            return !1
    }
    return !0
}
, generateTileContent = () => {
    let chitArray, resourceArray, probArray;
    switch (mode) {
        case "normal":
            chitArray = shuffle(state.numArray);
            resourceArray = shuffle(state.resourceArray);
            probArray = state.prob;
            break;
        case "expanded":
            chitArray = shuffle(state.expandednumArray);
            resourceArray = shuffle(state.expandedresourceArray);
            probArray = state.prob;
            break;
        case "super_expanded":
            chitArray = shuffle(state.superexpandednumArray);
            resourceArray = shuffle(state.superexpandedresourceArray);
            probArray = state.prob;
            break;
        default:
            chitArray = shuffle(state.numArray);
            resourceArray = shuffle(state.resourceArray);
            probArray = state.prob;
    }
    let a = [];


    for (let i in resourceArray) {
        let o = {};
        o.chit = chitArray[i];
        o.resource = resourceArray[i];
        o.probability = probArray[o.chit];
        a.push(o);
    }

    const desert = parseInt(document.getElementById('num_desert').value, 10) || 0;
    if (desert > 0) {
        for (let i = 0; i < desert; i++) {
            let d = {};
            d.resource = "desert";
            d.chit = "";
            d.probability = "";
            a.push(d);
        }
    }
    return shuffle(a);
}
, buildTiles = () => {
    document.getElementById("board").innerHTML = `<div class="${mode}BorderCommon border-${mode}"></div>`;
    for (var [e,t] of tileOffsetCSS.entries())
        document.getElementById("board").innerHTML += `<div class="hex-${mode} hex-base" style="${t}" id="tile-${e}")>
                  <div class="circle-${mode} circle-base font-size-wrap" id="circle-${e}">
                  </div>
              </div>`
}
, shuffleIsValid = e => {
    let t = true;
    if (!adjacent_6_8 && !passedAdjacencyTest(e, 6, 8)) {
        return false;
    }
    if (!passedBalancedCheck(e)) {
        return false;
    }
    if (!passedResourceCheck(e, 2)) {
        return false;
    }
    return t;
}
, fillTiles = () => {
    let e;
    for (; e = generateTileContent(),
    !shuffleIsValid(e); )
        ;
    for (var [t,s] of e.entries()) {
        var r, a = document.getElementById("tile-" + t); 
        t = document.getElementById("circle-" + t);
        for (r of a.classList)
            if (resourceTypes.includes(r)) {
                a.classList.remove(r);
                break
            }
        a.classList.add(s.resource),
        a.setAttribute("alt", s.resource),
        t.innerHTML = `<div class="tile-chit-${mode} chit-number-base">${s.chit}</div>`,
        8 == s.chit || 6 == s.chit ? a.classList.add("high-prob") : a.classList.remove("high-prob"),
        "desert" == s.resource ? t.classList.add("desert-chit") : (t.classList.remove("desert-chit"),
        t.innerHTML += `<div class="prob-dots-base small-font-size-wrap">${s.probability}<div/>`)
    }
}
, generateBoard = () => {
    event.preventDefault(),
    fillTiles()
}
, flipSameResourceSetting = () => {
    var e = document.getElementById("sameResourceSetting").classList;
    "normal" == mode ? e.remove("settingViewToggle") : e.add("settingViewToggle")
}
, optionsPopup = document.getElementById("popmenu"), toggleOptions = (document.addEventListener("mousedown", function(e) {
    optionsPopup.contains(e.target) || document.getElementById("popmenu").classList.contains("hidden") || toggleOptions()
}),
() => {
    var e = document.getElementById("popmenu").classList
      , t = document.getElementById("overlay").classList;
    flipSameResourceSetting(),
    t.contains("hidden") ? (t.remove("hidden"),
    t.add("overLay")) : (t.add("hidden"),
    t.remove("overLay")),
    e.contains("hidden") ? (e.remove("hidden"),
    setMenuValues()) : (e.add("hidden"),
    settingAdjusted && (settingAdjusted = !1,
    generateBoard()))
}
), start = () => {
    getAdjList(mode),
    buildTiles(mode),
    fillTiles()
}
;
start();
function saveCustomSettings() {
    // --- Resource Counts ---
    const wood = parseInt(document.getElementById('num_wood').value, 10) || 0;
    const brick = parseInt(document.getElementById('num_brick').value, 10) || 0;
    const sheep = parseInt(document.getElementById('num_sheep').value, 10) || 0;
    const wheat = parseInt(document.getElementById('num_wheat').value, 10) || 0;
    const ore = parseInt(document.getElementById('num_ore').value, 10) || 0;
    const desert = parseInt(document.getElementById('num_desert').value, 10) || 0;
    const totalResources = wood + brick + sheep + wheat + ore + desert;
    let expectedResources = 0;
    switch (mode) {
        case "normal": expectedResources = 19; break;
        case "expanded": expectedResources = 30; break;
        case "super_expanded": expectedResources = 37; break;
        default: expectedResources = 19;
    }
    if (totalResources !== expectedResources) {
        alert(`Total resource tiles must be ${expectedResources}. You have ${totalResources}.`);
        return;
    }
    let resourceArr = [];
    for (let i = 0; i < wood; i++) resourceArr.push("wood");
    for (let i = 0; i < brick; i++) resourceArr.push("brick");
    for (let i = 0; i < sheep; i++) resourceArr.push("sheep");
    for (let i = 0; i < wheat; i++) resourceArr.push("wheat");
    for (let i = 0; i < ore; i++) resourceArr.push("ore");
    switch (mode) {
        case "normal":
            state.resourceArray = resourceArr;
            break;
        case "expanded":
            state.expandedresourceArray = resourceArr;
            break;
        case "super_expanded":
            state.superexpandedresourceArray = resourceArr;
            break;
    }
    // --- Chit (Number) Counts ---
    const n2 = parseInt(document.getElementById('num_2').value, 10) || 0;
    const n3 = parseInt(document.getElementById('num_3').value, 10) || 0;
    const n4 = parseInt(document.getElementById('num_4').value, 10) || 0;
    const n5 = parseInt(document.getElementById('num_5').value, 10) || 0;
    const n6 = parseInt(document.getElementById('num_6').value, 10) || 0;
    const n8 = parseInt(document.getElementById('num_8').value, 10) || 0;
    const n9 = parseInt(document.getElementById('num_9').value, 10) || 0;
    const n10 = parseInt(document.getElementById('num_10').value, 10) || 0;
    const n11 = parseInt(document.getElementById('num_11').value, 10) || 0;
    const n12 = parseInt(document.getElementById('num_12').value, 10) || 0;
    const totalChits = n2 + n3 + n4 + n5 + n6 + n8 + n9 + n10 + n11 + n12;
    let expectedChits = 0;
    switch (mode) {
        case "normal": expectedChits = expectedResources - desert; break;
        case "expanded": expectedChits = expectedResources - desert; break;
        case "super_expanded": expectedChits = expectedResources - desert; break;
        default: expectedChits = 18;
    }
    if (totalChits !== expectedChits) {
        alert(`Total number chits must be ${expectedChits}. You have ${totalChits}.`);
        return;
    }
    let chitArr = [];
    for (let i = 0; i < n2; i++) chitArr.push(2);
    for (let i = 0; i < n3; i++) chitArr.push(3);
    for (let i = 0; i < n4; i++) chitArr.push(4);
    for (let i = 0; i < n5; i++) chitArr.push(5);
    for (let i = 0; i < n6; i++) chitArr.push(6);
    for (let i = 0; i < n8; i++) chitArr.push(8);
    for (let i = 0; i < n9; i++) chitArr.push(9);
    for (let i = 0; i < n10; i++) chitArr.push(10);
    for (let i = 0; i < n11; i++) chitArr.push(11);
    for (let i = 0; i < n12; i++) chitArr.push(12);
    switch (mode) {
        case "normal":
            state.numArray = chitArr;
            break;
        case "expanded":
            state.expandednumArray = chitArr;
            break;
        case "super_expanded":
            state.superexpandednumArray = chitArr;
            break;
    }
    // Hide modal and shuffle
    const modal = bootstrap.Modal.getOrCreateInstance(document.getElementById('combinedModal'));
    modal.hide();
    generateBoard();
}
